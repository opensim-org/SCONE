# sets relevant environment variables to their default values
#
# vars can be overridden by specifying them in the calling environment
# (e.g. a top-level script can just set CMAKE_BUILD_TYPE)

# returns number of processors the machine has
num_processors() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sysctl -n hw.ncpu
    else
        nproc
    fi
}

# helper: try to clone a repository, if it doesn't already exist locally
try_clone_checkout() {
    url="${1}"
    ref="${2}"

    dir=$(basename "${url}" | sed 's/.git$//')

    echo "${0}: ${dir}: must be built from source for Linux builds"
    if [ ! -d "${dir}" ]; then
        git clone "${url}"
        cd "${dir}"
        git checkout "${ref}"
        cd -
    else
        echo "${0}: ${dir}: already exists: skipping clone"
    fi
}

# scone project directory
export PROJECT_DIR=${PWD}

# scone build dir
export SCONE_BUILD_DIR=${PROJECT_DIR}/build

# scone install dir
export SCONE_INSTALL_DIR=${PROJECT_DIR}/install

# whether makefiles should emit commands (useful for debugging
# compiler flags + errors)
export CMAKE_VERBOSE_MAKEFILE="${CMAKE_VERBOSE_MAKEFILE:-True}"

# type of cmake build for all source builds. Usually "Release" or
# "RelWithDebInfo". "Debug" if you want a faster compile and nicer
# debugger experience.
export CMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE:-Release}"

# where openscenegraph binaries are installed post-build
export OSG_INSTALL_PATH=${OSG_INSTALL_PATH:-${PROJECT_DIR}/OpenSceneGraph/install}

# where simbody binaries are installed post-build
export SIMBODY_INSTALL_PATH=${SIMBODY_INSTALL_PATH:-${PROJECT_DIR}/simbody/install}

# where opensim3 binaries are installed post-build
export OPENSIM3_INSTALL_PATH="${OPENSIM3_INSTALL_PATH:-${PROJECT_DIR}/opensim3-scone/install}"

# where osgQt binaries are installed post-build
OSGQT_INSTALL_DIR="${OSGQT_INSTALL_DIR:-${PROJECT_DIR}/osgQt/install}"

# number of concurrent cc/c++ build jobs
export NUM_BUILD_JOBS="${NUM_BUILD_JOBS:-$(num_processors)}"

# if on mac, detect where Qt is installed (by brew)
if [[ "$OSTYPE" == "darwin"* ]]; then
    QT5_VERSIONS=(/usr/local/Cellar/qt@5/*)
    if [ ${#QT5_VERSIONS[@]} -ne 1 ]; then
        echo "ERROR: more than one version of qt5 detected in /usr/local/Cellar/qt"
        find /usr/local/Cellar/qt
    fi
    export QT5_BREW_PATH=${QT5_VERSIONS[0]}
fi

